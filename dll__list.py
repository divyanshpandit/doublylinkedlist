# -*- coding: utf-8 -*-
"""dll__list.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LRcjx67AtF1IkaOsXcPyS1JYHy4HP4_I
"""

class Node:
  def __init__(self,prev=None,item=None,next=None):
    self.prev=prev
    self.item=item
    self.next=next

class dll:
  def __init__(self,start=None):
    self.start=start
  def is_empty(self):
    return self.start==None
  def insert_at_first(self,data):
    n=Node(None,data,None)
    if self.start is None:
      n.next=None
      n.prev=None
      self.start=n
    else:
      n.next=self.start
      n.prev=None
      self.start.prev=n
      self.start=n
  def insert_at_last(self,data):
    n=Node(None,data,None)
    if self.start is None :
      n.next=None
      n.prev=None
      self.start=n
    else:
      temp=self.start
      while temp.next != None:
        temp=temp.next
      n.next=None
      n.prev=temp
      temp.next=n
  def insert_after(self,tempd,data):
    n=Node(None,data,None)
    if self.start is None:
      return
    else:
      temp=self.start
      while temp.next!=None:
        if tempd==temp.item:
          n.next=temp.next
          n.prev=temp
          temp.next.prev=n
          temp.next=n
          break
        temp=temp.next
      if temp.next==None and tempd==temp.item :
        self.insert_at_last(data)
  def delete_first(self):
    if self.start is None:
      return
    if self.start.next is None:
      self.start=None
      return
    else:
      self.start.next.prev=None
      self.start=self.start.next
  def delete_last(self):
    if self.start is None:
      return
    if self.start.next is None:
      self.start=None
      return
    else:
      temp=self.start
      while temp.next.next != None:
        temp=temp.next
      temp.next=None
  def delete_item(self,data):
    if self.start is None:
      return
    if self.start.item==data:
      self.start.delete_first(data)
    else:
      temp=self.start
      while temp.next!= None:
        if temp.item==data:
          temp.next.prev=temp.prev
          temp.prev.next=temp.next
          break
        temp=temp.next
      if temp.next ==None and temp.item==data:
        self.delete_last()
  def print_list(self):
    if self.start is None:
      print("list khali h")
      return
    else:
      temp=self.start
      while True:
        print(temp.item , end="<>")
        if temp.next==None:
          break
        temp=temp.next
  def __iter__(self):
    return dlliterator(self.start)
class dlliterator:
  def __init__(self,start):
    self.current=start
  def __iter__(self):
    return self
  def __next__(self):
    if self.current is None:
      raise StopIteration
    data=self.current.item
    self.current=self.current.next
    return data

q=dll()
q.insert_at_first(40)
q.insert_at_first(50)
q.insert_at_last(70)
q.insert_at_first(50)
q.insert_after(70,80)
q.insert_after(50,90)
#q.delete_first()
#q.delete_last()
q.delete_item(80)
for item in q:
  print(item)
q.print_list()